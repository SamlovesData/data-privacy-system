package com.example.dataprivacy.controller;

import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * HOW IS THIS CONSIDERED AN API??
 * 
 * 1. It Exposes and Endpoint - the GET ("/api/welcome") is an endpoint- an
 * accesible URL that the client (Postman) can call. - This endpoint responds
 * with data, specifically the string that is assigned to it.
 * 
 * 2. It Follows API Design Principles - The @RestController annotation in
 * Spring Boot ensures the class serves HTTP-based API request. -
 * the @RequestMapping("/api") defines the base path for the API(/api). -
 * The @GetMapping("/welcome") specifies the endpoint for GET request.
 * 
 * 3. It Allows Communication - Clients can interact with this endpoint by
 * sending a request to ( Http://localhost:8080/api/welcome). - The server
 * responds, enabling communication between client and server.
 */

@RestController
@RequestMapping("/api")
public class DataPrivacyController { // REST Controller for REST API

	private static final String UPLOAD_DIR = "./uploads/";

	@GetMapping("/welcome")
	public String welcome() {

		return "Welcome to the Data Privacy and Security System";
	}

	// Adding File Upload Functionality
	@PostMapping("/upload")
	public String uploadFile(@RequestParam("file") MultipartFile file) {

		try {
			byte[] bytes = file.getBytes();
			Path path = Paths.get(UPLOAD_DIR + file.getOriginalFilename());
			Files.write(path, bytes);
			return "File uploaded successfully!";

		} catch (IOException e) {

			e.printStackTrace();

			return " Error uploading file!";
		}
	}
}
